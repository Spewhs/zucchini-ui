[
  {
    "comments": [
      {
        "line": 1,
        "value": "# language: fr"
      }
    ],
    "line": 6,
    "elements": [
      {
        "comments": [
          {
            "line": 12,
            "value": "# Commentaire sur le premier test"
          },
          {
            "line": 13,
            "value": "# Exemple de commentaire avec une URL : http://example.org/test/123"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 14642305,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 112152,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 14,
        "name": "Premier test",
        "description": "",
        "id": "test;premier-test",
        "after": [
          {
            "result": {
              "duration": 26308,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "duration": 472241572,
              "status": "passed"
            },
            "line": 15,
            "name": "j\u0027additionne 5 et 8",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 13
                },
                {
                  "val": "8",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 822741,
              "status": "passed"
            },
            "line": 16,
            "name": "j\u0027obtiens 13",
            "match": {
              "arguments": [
                {
                  "val": "13",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "keyword": "Alors "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 18,
            "value": "# Joli test avec un tableau"
          },
          {
            "line": 19,
            "value": "# Et ça marche !"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 25870,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 53928,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 21,
        "name": "Test avec un tableau",
        "description": "",
        "id": "test;test-avec-un-tableau",
        "after": [
          {
            "result": {
              "duration": 22671,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "duration": 67914050,
              "status": "passed"
            },
            "line": 22,
            "name": "j\u0027obtiens le tableau suivant:",
            "match": {
              "location": "ExampleSteps.assertTable(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "1",
                  "2",
                  "3"
                ],
                "line": 23
              },
              {
                "cells": [
                  "4",
                  "5",
                  "6"
                ],
                "line": 24
              }
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 20,
            "name": "@tata"
          },
          {
            "line": 20,
            "name": "@titi"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 40616,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 45963,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 35,
        "name": "Second test : additionner 5 et 8",
        "description": "",
        "id": "test;second-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;2",
        "after": [
          {
            "result": {
              "duration": 27130,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 198611,
              "status": "passed"
            },
            "line": 29,
            "name": "j\u0027additionne 5 et 8",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 13
                },
                {
                  "val": "8",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 143168,
              "status": "passed"
            },
            "comments": [
              {
                "line": 30,
                "value": "# Pourriture"
              }
            ],
            "line": 31,
            "name": "j\u0027obtiens 13",
            "match": {
              "arguments": [
                {
                  "val": "13",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@titi"
          },
          {
            "line": 27,
            "name": "@tata"
          },
          {
            "line": 3,
            "name": "@toto"
          },
          {
            "line": 5,
            "name": "@tutu"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 146432,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 56498,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 36,
        "name": "Second test : additionner 104 et -6",
        "description": "",
        "id": "test;second-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;3",
        "after": [
          {
            "result": {
              "duration": 37710,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 193883,
              "status": "passed"
            },
            "line": 29,
            "name": "j\u0027additionne 104 et -6",
            "match": {
              "arguments": [
                {
                  "val": "104",
                  "offset": 13
                },
                {
                  "val": "-6",
                  "offset": 20
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 155652,
              "status": "passed"
            },
            "comments": [
              {
                "line": 30,
                "value": "# Pourriture"
              }
            ],
            "line": 31,
            "name": "j\u0027obtiens 98",
            "match": {
              "arguments": [
                {
                  "val": "98",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@titi"
          },
          {
            "line": 27,
            "name": "@tata"
          },
          {
            "line": 3,
            "name": "@toto"
          },
          {
            "line": 5,
            "name": "@tutu"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 44256,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 45133,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 37,
        "name": "Second test : additionner 1 et 2",
        "description": "",
        "id": "test;second-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;4",
        "after": [
          {
            "result": {
              "duration": 175960,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 244452,
              "status": "passed"
            },
            "line": 29,
            "name": "j\u0027additionne 1 et 2",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 13
                },
                {
                  "val": "2",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 10819816,
              "error_message": "java.lang.AssertionError: \nExpecting:\n \u003c3\u003e\nto be equal to:\n \u003c10\u003e\nbut was not.\n\tat io.zucchini.examples.glues.AdditionSteps.assertCalcul(AdditionSteps.java:20)\n\tat ✽.Alors j\u0027obtiens 10(test.feature:31)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 30,
                "value": "# Pourriture"
              }
            ],
            "line": 31,
            "name": "j\u0027obtiens 10",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@titi"
          },
          {
            "line": 27,
            "name": "@tata"
          },
          {
            "line": 3,
            "name": "@toto"
          },
          {
            "line": 5,
            "name": "@tutu"
          }
        ]
      }
    ],
    "name": "test",
    "description": "\nAfin de tester Cucumber\nEn tant que développeur\nJe souhaite écrire des scénarios de tests",
    "id": "test",
    "keyword": "Fonctionnalité",
    "uri": "test.feature",
    "tags": [
      {
        "line": 3,
        "name": "@toto"
      },
      {
        "line": 4,
        "name": "@titi"
      },
      {
        "line": 5,
        "name": "@tutu"
      }
    ]
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# language: fr"
      }
    ],
    "line": 4,
    "elements": [
      {
        "line": 7,
        "name": "Toto",
        "description": "",
        "type": "background",
        "keyword": "Contexte",
        "steps": [
          {
            "result": {
              "duration": 70664,
              "status": "passed"
            },
            "comments": [
              {
                "line": 8,
                "value": "# Init de contexte"
              }
            ],
            "line": 9,
            "name": "un contexte initialisé",
            "match": {
              "location": "ExampleSteps.initializedContext()"
            },
            "keyword": "Soit "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 11,
            "value": "# Exemple de test qui ne marche pas"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 217121,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 134858,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "Test gauffré",
        "description": "",
        "id": "test2;test-gauffré",
        "after": [
          {
            "result": {
              "duration": 26096,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "duration": 412055,
              "status": "passed"
            },
            "line": 13,
            "name": "j\u0027additionne -1 et -1",
            "match": {
              "arguments": [
                {
                  "val": "-1",
                  "offset": 13
                },
                {
                  "val": "-1",
                  "offset": 19
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 1186549,
              "error_message": "java.lang.AssertionError: \nExpecting:\n \u003c-2\u003e\nto be equal to:\n \u003c500\u003e\nbut was not.\n\tat io.zucchini.examples.glues.AdditionSteps.assertCalcul(AdditionSteps.java:20)\n\tat ✽.Alors j\u0027obtiens 500(test2.feature:15)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 14,
                "value": "# Mauvais résultat"
              }
            ],
            "line": 15,
            "name": "j\u0027obtiens 500",
            "match": {
              "arguments": [
                {
                  "val": "500",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "keyword": "Alors "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "j\u0027obtiens 600",
            "match": {
              "arguments": [
                {
                  "val": "600",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "keyword": "Et "
          }
        ]
      },
      {
        "line": 7,
        "name": "Toto",
        "description": "",
        "type": "background",
        "keyword": "Contexte",
        "steps": [
          {
            "result": {
              "duration": 54121,
              "status": "passed"
            },
            "comments": [
              {
                "line": 8,
                "value": "# Init de contexte"
              }
            ],
            "line": 9,
            "name": "un contexte initialisé",
            "match": {
              "location": "ExampleSteps.initializedContext()"
            },
            "keyword": "Soit "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 34333,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 34088,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 18,
        "name": "Test à la con",
        "description": "",
        "id": "test2;test-à-la-con",
        "after": [
          {
            "result": {
              "duration": 18724,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "duration": 192374,
              "status": "passed"
            },
            "line": 19,
            "name": "j\u0027additionne -1 et 12",
            "match": {
              "arguments": [
                {
                  "val": "-1",
                  "offset": 13
                },
                {
                  "val": "12",
                  "offset": 19
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 107826,
              "status": "passed"
            },
            "line": 20,
            "name": "j\u0027obtiens 11",
            "match": {
              "arguments": [
                {
                  "val": "11",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "keyword": "Alors "
          }
        ]
      },
      {
        "line": 7,
        "name": "Toto",
        "description": "",
        "type": "background",
        "keyword": "Contexte",
        "steps": [
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 8,
                "value": "# Init de contexte"
              }
            ],
            "line": 9,
            "name": "un contexte initialisé",
            "match": {
              "location": "ExampleSteps.initializedContext()"
            },
            "keyword": "Soit "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39573,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 1823886,
              "error_message": "cucumber.api.PendingException: @wip test\n\tat io.zucchini.examples.glues.ExampleEnv.disableWipTests(ExampleEnv.java:25)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runBeforeHooks(Runtime.java:202)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:40)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.runtime.Runtime.run(Runtime.java:122)\n\tat cucumber.api.cli.Main.run(Main.java:36)\n\tat cucumber.api.cli.Main.main(Main.java:18)\n",
              "status": "pending"
            },
            "match": {
              "location": "ExampleEnv.disableWipTests()"
            }
          },
          {
            "result": {
              "duration": 51324,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "En préparation",
        "description": "",
        "id": "test2;en-préparation",
        "after": [
          {
            "result": {
              "duration": 29964,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "j\u0027additionne -1 et 12",
            "match": {
              "arguments": [
                {
                  "val": "-1",
                  "offset": 13
                },
                {
                  "val": "12",
                  "offset": 19
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "keyword": "Quand "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "j\u0027obtiens 11",
            "match": {
              "arguments": [
                {
                  "val": "11",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 22,
            "name": "@wip"
          }
        ]
      },
      {
        "line": 7,
        "name": "Toto",
        "description": "",
        "type": "background",
        "keyword": "Contexte",
        "steps": [
          {
            "result": {
              "duration": 57740,
              "status": "passed"
            },
            "comments": [
              {
                "line": 8,
                "value": "# Init de contexte"
              }
            ],
            "line": 9,
            "name": "un contexte initialisé",
            "match": {
              "location": "ExampleSteps.initializedContext()"
            },
            "keyword": "Soit "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 47642,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 48387,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 27,
        "name": "Non implémenté",
        "description": "",
        "id": "test2;non-implémenté",
        "after": [
          {
            "result": {
              "duration": 27285,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 28,
            "name": "une tâche non implémentée",
            "match": {},
            "keyword": "Soit "
          }
        ]
      },
      {
        "line": 7,
        "name": "Toto",
        "description": "",
        "type": "background",
        "keyword": "Contexte",
        "steps": [
          {
            "result": {
              "duration": 74491,
              "status": "passed"
            },
            "comments": [
              {
                "line": 8,
                "value": "# Init de contexte"
              }
            ],
            "line": 9,
            "name": "un contexte initialisé",
            "match": {
              "location": "ExampleSteps.initializedContext()"
            },
            "keyword": "Soit "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 164476,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 56201,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 30,
        "name": "En attente",
        "description": "",
        "id": "test2;en-attente",
        "after": [
          {
            "result": {
              "duration": 77199,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "result": {
              "duration": 251067,
              "error_message": "cucumber.api.PendingException: TODO: implement me\n\tat io.zucchini.examples.glues.ExampleSteps.pendingTask(ExampleSteps.java:18)\n\tat ✽.Soit une tâche en attente(test2.feature:31)\n",
              "status": "pending"
            },
            "line": 31,
            "name": "une tâche en attente",
            "match": {
              "location": "ExampleSteps.pendingTask()"
            },
            "keyword": "Soit "
          }
        ]
      }
    ],
    "name": "test2",
    "description": "Je souhaite écrire des scénarios de tests",
    "id": "test2",
    "keyword": "Fonctionnalité",
    "uri": "test2.feature",
    "tags": [
      {
        "line": 3,
        "name": "@toto"
      }
    ]
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# language: fr"
      }
    ],
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 41885,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 45523,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 14,
        "name": "Troisième test : additionner 5 et 8",
        "description": "",
        "id": "test3;troisième-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;2",
        "after": [
          {
            "result": {
              "duration": 107083,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 227392,
              "status": "passed"
            },
            "line": 9,
            "name": "j\u0027additionne 5 et 8",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 13
                },
                {
                  "val": "8",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 161604,
              "status": "passed"
            },
            "line": 10,
            "name": "j\u0027obtiens 13",
            "match": {
              "arguments": [
                {
                  "val": "13",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 7,
            "name": "@toto"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 147214,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 212828,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "Troisième test : additionner 104 et -6",
        "description": "",
        "id": "test3;troisième-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;3",
        "after": [
          {
            "result": {
              "duration": 20640,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 233569,
              "status": "passed"
            },
            "line": 9,
            "name": "j\u0027additionne 104 et -6",
            "match": {
              "arguments": [
                {
                  "val": "104",
                  "offset": 13
                },
                {
                  "val": "-6",
                  "offset": 20
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 135666,
              "status": "passed"
            },
            "line": 10,
            "name": "j\u0027obtiens 98",
            "match": {
              "arguments": [
                {
                  "val": "98",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 7,
            "name": "@toto"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 46453,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 41779,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "Troisième test : additionner 1 et 2",
        "description": "",
        "id": "test3;troisième-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;4",
        "after": [
          {
            "result": {
              "duration": 27516,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 446822,
              "status": "passed"
            },
            "line": 9,
            "name": "j\u0027additionne 1 et 2",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 13
                },
                {
                  "val": "2",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 960657,
              "error_message": "java.lang.AssertionError: \nExpecting:\n \u003c3\u003e\nto be equal to:\n \u003c10\u003e\nbut was not.\n\tat io.zucchini.examples.glues.AdditionSteps.assertCalcul(AdditionSteps.java:20)\n\tat ✽.Alors j\u0027obtiens 10(test3.feature:10)\n",
              "status": "failed"
            },
            "line": 10,
            "name": "j\u0027obtiens 10",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 7,
            "name": "@toto"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 51102,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 49449,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 17,
        "name": "Troisième test : additionner 8 et 9",
        "description": "",
        "id": "test3;troisième-test-:-additionner-\u003ca\u003e-et-\u003cb\u003e;;5",
        "after": [
          {
            "result": {
              "duration": 25255,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Plan du scénario",
        "steps": [
          {
            "result": {
              "duration": 199039,
              "status": "passed"
            },
            "line": 9,
            "name": "j\u0027additionne 8 et 9",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 13
                },
                {
                  "val": "9",
                  "offset": 18
                }
              ],
              "location": "AdditionSteps.addTwoNumbers(int,int)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 1024548,
              "error_message": "java.lang.AssertionError: \nExpecting:\n \u003c17\u003e\nto be equal to:\n \u003c10\u003e\nbut was not.\n\tat io.zucchini.examples.glues.AdditionSteps.assertCalcul(AdditionSteps.java:20)\n\tat ✽.Alors j\u0027obtiens 10(test3.feature:10)\n",
              "status": "failed"
            },
            "line": 10,
            "name": "j\u0027obtiens 10",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 10
                }
              ],
              "location": "AdditionSteps.assertCalcul(int)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Alors "
          }
        ],
        "tags": [
          {
            "line": 7,
            "name": "@toto"
          }
        ]
      }
    ],
    "name": "test3",
    "description": "\nExemple de test",
    "id": "test3",
    "keyword": "Fonctionnalité",
    "uri": "test3.feature"
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# language: fr"
      }
    ],
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 39193,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logStartOfTest()"
            }
          },
          {
            "result": {
              "duration": 41817,
              "status": "passed"
            },
            "match": {
              "location": "GrumpyCatSteps.setScenario(Scenario)"
            }
          }
        ],
        "line": 7,
        "name": "Grumpy cat",
        "description": "",
        "id": "test4;grumpy-cat",
        "after": [
          {
            "result": {
              "duration": 23569,
              "status": "passed"
            },
            "match": {
              "location": "ExampleEnv.logEndOfTest()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scénario",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/jpeg"
              }
            ],
            "result": {
              "duration": 43866135,
              "status": "passed"
            },
            "line": 8,
            "name": "j\u0027affiche l\u0027image de Grumpy Cat",
            "match": {
              "location": "GrumpyCatSteps.displayGrumpyCat()"
            },
            "keyword": "Quand "
          },
          {
            "result": {
              "duration": 44185,
              "status": "passed"
            },
            "line": 9,
            "name": "je suis de mauvaise humeur",
            "match": {
              "location": "GrumpyCatSteps.assertBadMood()"
            },
            "keyword": "Alors "
          }
        ]
      }
    ],
    "name": "test4",
    "description": "\nJe veux afficher les pièces jointes à mes étapes de scénario",
    "id": "test4",
    "keyword": "Fonctionnalité",
    "uri": "test4.feature"
  }
]